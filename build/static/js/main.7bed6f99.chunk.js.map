{"version":3,"sources":["reducer.js","store.js","index.js"],"names":["defaultState","questionList","store","createStore","state","action","newState","JSON","parse","stringify","type","push","value","ListItem","props","content","Content","addContent","item","getState","handleStoreChange","bind","subscribe","list","this","map","index","key","setState","React","Component","Requirements","grade","onChange","handleChange1","handleChange2","onClick","e","addQuestion","generateExam","url","console","log","fetch","method","then","res","json","dispatch","alert","Container","ReactDOM","render","document","getElementById"],"mappings":"2PACMA,EAAe,CACjBC,aAAc,ICKHC,EAFDC,aDDG,WAAmC,IAAlCC,EAAiC,uDAAzBJ,EAAcK,EAAW,uCACzCC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUL,IAC3C,OAAQC,EAAOK,MACb,IAAK,UAEH,OADAJ,EAASL,aAAaU,KAAKN,EAAOO,OAC3BN,EAKX,OAAOF,K,MEVX,SAASS,EAASC,GACd,OACI,4BACI,2BAAIA,EAAMC,U,IAIhBC,E,YACF,WAAYF,GAAO,IAAD,8BACd,4CAAMA,KA0BVG,WAAW,SAACC,GACR,EAAKd,MAAMH,aAAaU,KAAKO,IA1B7B,EAAKd,MAAQ,CACTH,aAAaC,EAAMiB,WAAWlB,cAGlC,EAAKmB,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzBnB,EAAMoB,UAAU,EAAKF,mBAPP,E,sEAUd,IAAIG,EAAKC,KAAKpB,MAAMH,aAAawB,KAAI,SAACP,EAAKQ,GACvC,OACI,kBAACb,EAAD,CAAUc,IAAKD,EAAOX,QAASG,EAAKH,aAG5C,OACI,6BACI,4BAAKQ,M,0CAMbC,KAAKI,SAAS,CACV3B,aAAaC,EAAMiB,WAAWlB,mB,GAzBpB4B,IAAMC,WAgCtBC,E,YACF,WAAYjB,GAAO,IAAD,8BACd,4CAAMA,KACDV,MAAM,CACPM,KAAK,QACLsB,MAAM,GAJI,E,sEAOT,IAAD,OACJ,OACI,6BACI,4BAAQtB,KAAMc,KAAKpB,MAAMM,KAAMuB,SAAUT,KAAKU,eAC9B,4BAAQxB,KAAK,SAAb,SACA,4BAAQA,KAAK,UAAb,UACA,4BAAQA,KAAK,SAAb,UAEhB,4BAAQsB,MAAOR,KAAKpB,MAAM4B,MAAOC,SAAUT,KAAKW,eAChC,4BAAQH,MAAO,GAAf,KACA,4BAAQA,MAAO,GAAf,KACA,4BAAQA,MAAO,GAAf,MAEhB,4BAAQpB,MAAM,SAASwB,QAAS,SAACC,GAAD,OAAK,EAAKC,YACtC,EAAKlC,MAAMM,KACX,EAAKN,MAAM4B,MACXK,KAHJ,gBAKA,4BAAQzB,MAAM,WAAWwB,QAAS,SAACC,GAAD,OAAK,EAAKE,aAAaF,KAAzD,mB,kCAKA3B,EAAKsB,EAAMK,GACnB,IAAIG,EAAI,2BAA2BR,EAE/Bd,EAAO,CACP,GAAK,IACL,KAAO,QACP,QAAU,SACV,OAAS,QAEbuB,QAAQC,IAAIF,GAEZG,MAAMH,EAAK,CAACI,OAAQ,QAClBC,MACE,SAAAC,GACI,OAAOA,EAAIC,UAGZF,MAAK,SAACE,GACLN,QAAQC,IAAIK,GACZ7B,EAAI,QAAY6B,EAAKhC,WAI7B,IAAMV,EAAS,CACXK,KAAM,UACNE,MAAOM,GAEXhB,EAAM8C,SAAS3C,GACfoC,QAAQC,IAAIxC,EAAMiB,c,mCAGTkB,GACTY,MAAM,sF,GA/DapB,IAAMC,WAkE3BoB,E,YACF,WAAYpC,GAAQ,IAAD,8BACf,4CAAMA,KACDV,MAAQ,GAFE,E,sEAMf,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAVQyB,IAAMC,WAe9BqB,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.7bed6f99.chunk.js","sourcesContent":["// 定义初始数据defaultState，如果不给state设置一个初始数据，那么最初state就是一个undefined。\r\nconst defaultState = {\r\n    questionList: []\r\n  };\r\n  export default (state = defaultState, action) => {\r\n    const newState = JSON.parse(JSON.stringify(state)); //深拷贝，因为reducer可以接收state, 但绝不能修改state 所以要拷贝state\r\n    switch (action.type) {\r\n      case 'addItem':\r\n        newState.questionList.push(action.value);\r\n        return newState;\r\n      default:\r\n        break;\r\n    }\r\n    // state指的是上一次存储的数据, action是组件传过来的内容\r\n    return state;\r\n  }","// 从redux引入createStore方法\r\nimport { createStore } from 'redux'; \r\n// 从刚刚创建的reducer.js引入reducer\r\nimport reducer from './reducer';\r\n// 定义一个名为store的redux存储区，我们把reducer作为参数传入createStore方法来构造这个存储区，store里的数据只可以通过reducer来修改。\r\nconst store = createStore(reducer);\r\n// 导出store\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from './store'\nimport './index.css';\nfunction ListItem(props){\n    return (\n        <li>\n            <p>{props.content}</p>\n        </li>\n    )\n}\nclass Content extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            questionList:store.getState().questionList\n        }\n        // 订阅store, 只要store发生改变, subscribe里的函数就会被自动执行\n        this.handleStoreChange = this.handleStoreChange.bind(this);\n        store.subscribe(this.handleStoreChange);\n    }\n    render(){\n        let list=this.state.questionList.map((item,index)=>{\n            return (\n                <ListItem key={index} content={item.content}></ListItem>\n            )\n        })\n        return(\n            <div>\n                <ul>{list}</ul>\n            </div>\n        )\n    }\n    handleStoreChange() {\n        //当感知到store变化的时候, 调用store.getState()方法从store中重新取一次数据, 然后调用setState替换掉当前组件中的数据, 这样就会同步数据了\n        this.setState({\n            questionList:store.getState().questionList\n        });\n      }\n    addContent=(item)=>{\n        this.state.questionList.push(item)\n    }\n}\nclass Requirements extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            type:'judge',\n            grade:1\n        }\n    }\n    render(){\n        return(\n            <div>\n                <select type={this.state.type} onChange={this.handleChange1}>\n                                <option type=\"judge\">judge</option>\n                                <option type=\"choose\">choose</option>\n                                <option type=\"blank\">blank</option>\n                </select>\n                <select grade={this.state.grade} onChange={this.handleChange2}>\n                                <option grade={1}>1</option>\n                                <option grade={2}>2</option>\n                                <option grade={3}>3</option>\n                </select>\n                <button value=\"submit\" onClick={(e)=>this.addQuestion(\n                    this.state.type,\n                    this.state.grade,\n                    e\n                )}>添加</button>\n                <button value=\"generate\" onClick={(e)=>this.generateExam(e)}>生成</button>\n            </div>\n        )\n    }\n    /*增加题目，发送查询，保存到content的数组当中，并且显示在页面上*/\n    addQuestion(type,grade,e){\n        let url=\"/demo/api/questions/one/\"+grade;\n        /*根据参数请求。。。*/\n        let item = {\n            \"id\":\"1\",\n            \"type\":\"judge\",\n            \"content\":\"formal\",\n            \"answer\":\"true\"\n        }\n        console.log(url);\n        /*获取到的json内容*/\n        fetch(url, {method: 'GET'}\n        ).then(\n            res=>{\n                return res.json()\n                //res => res.text()          // convert to plain text\n                //).then(text => console.log(text))  // then log it out\n            }).then((json)=>{\n                console.log(json)\n                item[\"content\"]=json.content\n            });\n            \n        \n        const action = {\n            type: 'addItem',\n            value: item,\n        }\n        store.dispatch(action);\n        console.log(store.getState());\n    }\n    /*通过生成，完成一张试卷的完整组成*/\n    generateExam(e){\n        alert('完成试卷组成，进行页面跳转')\n    }\n}\nclass Container extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n    render(){\n        return(\n            <div>\n                <Requirements/>\n                <Content/>\n            </div>\n        )\n    }\n}\nReactDOM.render(\n    <Container/>,\n    document.getElementById('root')\n)"],"sourceRoot":""}